#!/usr/bin/env bash

echo "command: "
for var in "$@"
do
    echo "$var"
done

echo "lsb_release -a"
lsb_release -a

echo "uname -a"
uname -a

echo "uname -p"
uname -p

echo "uname -i"
uname -i

echo "uname -o"
uname -o

echo "uname -s"
uname -s

echo "uname -v"
uname -v


BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)

build_dir=$1
cache_dir=$2
env_dir=$3

echo "build"
ls -l $build_dir

echo "cache"
ls -l $cache_dir

echo "env"
ls -l $env_dir

# we really want our cache dir
#if [ ! -d $cache_dir ]; then
#    mkdir -p $cache_dir
#fi

echo "download toolchain, if need be, leave it in $cache_dir"

pushd $cache_dir
pwd
ls -l

bins="http://opendylan.org/downloads/opendylan/2013.2/opendylan-2013.2-x86_64-linux.tar.bz2"
targetfile="opendylan.tar.bz2"
dir="opendylan-2013.2"

if [ ! -d $dir ]; then
    echo "downloading opendylan"
    curl -s -o $targetfile $bins

    echo "downlod finish"

    if [ ! -f "$targetfile" ]; then
	echo "file doesnt exist"
	exit 2
    fi

    echo "extracting opendylan"
    tar -jxf $targetfile

    if [ ! -d "$dir/bin" ]; then
	echo "dir doesnt exist"
	exit 2
    fi

    echo "test compiler"

    if [ ! -f "$dir/bin/dylan-compiler" ]; then
	echo "compiler doesnt exist"
	exit 2
    fi
else
    echo "we already seem to have the compiler, continue!"
fi

echo "some ls"

ls -l `pwd`
ls -l $ROOT_DIR/vendor/libgc

echo "clean-ish env"

printenv

echo "setting up paths"

# we need this so ld doesn't fail ...
export LIBRARY_PATH=$ROOT_DIR/vendor/libgc

# we need this because there's dynamic linkage with libgc
export LD_LIBRARY_PATH=$ROOT_DIR/vendor/libgc

# we need this because we need dylan-compiler
export PATH=$PATH:$cache_dir/$dir/bin

echo "test compiler ... "

# does it work?
dylan-compiler -version    

echo "more tests"

# just to make sure we have everything we need
whereis ld
whereis gcc
whereis git

# cd $build_dir

echo "loading subprojects"

# TODO we have git, but $build_dir is not a valid git repository. we need to test a way of loading external projects...
#git submodule update --init --recursive

pushd $build_dir

lid_file=`find \`pwd\` -maxdepth 1 -name "*.lid"`

echo "lid_file: $lid_file"

popd

# build inside the cache_dir
# HACK we need access to the registry
ln -s $build_dir/registry registry

echo "building"
dylan-compiler -build $lid_file

cp _build/bin $build_dir
cp _build/lib $build_dir

popd

#exit 1
echo "ok"
